package my.company.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UsuariosAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuariosAllPropertiesEquals(Usuarios expected, Usuarios actual) {
        assertUsuariosAutoGeneratedPropertiesEquals(expected, actual);
        assertUsuariosAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuariosAllUpdatablePropertiesEquals(Usuarios expected, Usuarios actual) {
        assertUsuariosUpdatableFieldsEquals(expected, actual);
        assertUsuariosUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuariosAutoGeneratedPropertiesEquals(Usuarios expected, Usuarios actual) {
        assertThat(expected)
            .as("Verify Usuarios auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuariosUpdatableFieldsEquals(Usuarios expected, Usuarios actual) {
        assertThat(expected)
            .as("Verify Usuarios relevant properties")
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getApellido()).as("check apellido").isEqualTo(actual.getApellido()))
            .satisfies(e -> assertThat(e.getDireccion()).as("check direccion").isEqualTo(actual.getDireccion()))
            .satisfies(e -> assertThat(e.getFechaAlta()).as("check fechaAlta").isEqualTo(actual.getFechaAlta()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUsuariosUpdatableRelationshipsEquals(Usuarios expected, Usuarios actual) {}
}
